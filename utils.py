import sys
from pathlib import Path

import ArducamSDK
import arducam_config_parser
import time

import cv2
from PIL import ImageDraw, ImageFont, Image
import numpy as np
from loguru import logger


usb_config = """
;**************************************************************************************/
; ----- camera parameter -----
;
; -- Keyname description:
; CFG_MODE  = set the config mode for camera: 0 -> User define(UI)
;											  1 -> This config File
; TYPE      = set the name of the camera module
; VID		= set the Vendor ID of camera
; SIZE		= set the width and height of the image generated by camera 
; BIT_WIDTH = set the bit width of the image generated by camera 
; FORMAT    = set the format of the image generated by camera:
;							 | 0 -> RAW	   | 1 -> RGB565  |	2 -> YUV422   | 3 -> JPG  |
;							 | -- 0 -> RG  | -- 0 -> RGB  | -- 0 -> YUYV  |           |
;							 | -- 1 -> GR  | -- 1 -> BGR  | -- 1 -> YVYU  |           |
;							 | -- 2 -> GB  |              | -- 2 -> UYVY  |           |
;							 | -- 3 -> BG  |              | -- 3 -> VYUY  |           |
; I2C_MODE  = set the bit width of the address and data of I2C communication: 
;																							0 ->  8 bit address &  8 bit value				
;																						  	1 ->  8 bit address & 16 bit value
;																							2 -> 16 bit address &  8 bit value
;																							3 -> 16 bit address & 16 bit value		
; I2C_ADDR  = set the ship address for register config of camera 
; 
; -- Keyname format:
; CFG_MODE  	= <value1>							;<comment>
; TYPE      	= <value1>
; VID			= <vid>
; SIZE			= <width>, <height>
; BIT_WIDTH 	= <bitWidth>
; FORMAT    	= <value1>[, <value2>]
; I2C_MODE  	= <value1>
; I2C_ADDR  	= <i2cAddress> 
;
; <valueN>		Index value representing certain meanings 
; <vid>			Vendor ID of the camera
; <width>		Width of the image generated by camera
; <height>		Height of the image generated by camera
; <bitWidth>	Bit width of the image generated by camera
; <i2cAddress>	Ship address for register config of camera
; <comment>    	Some form of C-style comments are supported in this .cfg file
;
;**************************************************************************************/
[camera parameter]
CFG_MODE  = 0	
TYPE      = IMX378_477_577
SIZE      = 4056, 3040
BIT_WIDTH = 8 
FORMAT    = 0, 3
I2C_MODE  = 2					
I2C_ADDR  = 0x34
;TRANS_LVL = 128
;**************************************************************************************/

[control parameter]
MIN_VALUE   = 2
MAX_VALUE   = 10
STEP        = 1
DEF 		= 10
CTRL_NAME	= Framerate
FUNC_NAME	= setFramerate
======CODE_BLOCK_START======
function setFramerate(val)
    local pix_clk_hz = 614400000
    -- line_length 0x0342 0x0343
    local hts = 18856
    local vts =  math.floor(pix_clk_hz/(hts*val))
    -- vts 0x0340 0x0341
	writeReg(0x0340, (vts & 0xFF00) >> 8)
    writeReg(0x0341, (vts & 0x00FF) >> 0)
end
======CODE_BLOCK_END======

[control parameter]
MIN_VALUE   = 1
MAX_VALUE   = 100000
STEP        = 1
DEF 		= 94525
CTRL_NAME	= Exp(us)
FUNC_NAME	= setExposureTime
======CODE_BLOCK_START======
function setExposureTime(val)
    -- vts 0x015a 0x015b
    local hts = 18856
    local pix_clk_hz = 614400000
    local exp = math.floor(val*1000/(hts/pix_clk_hz*1e9))

	writeReg(0x0202, (exp & 0xFF00) >> 8)
    writeReg(0x0203, (exp & 0x00FF) >> 0)
end
======CODE_BLOCK_END======

[control parameter]
MIN_VALUE   = 0
MAX_VALUE   = 978
STEP        = 1
DEF 		= 0
CTRL_NAME	= Gain
FUNC_NAME	= setGain
======CODE_BLOCK_START======
function setGain(val)
    -- vts 0x0204 0x0205

	writeReg(0x0204, (val & 0xFF00) >> 8)
    writeReg(0x0205, (val & 0x00FF) >> 0)
end
======CODE_BLOCK_END======

[control parameter]
MIN_VALUE   = 100
MAX_VALUE   = 2226
STEP        = 100
DEF 		= 0
CTRL_NAME	= Gain(0.01x)
FUNC_NAME	= setAnalogueGain
======CODE_BLOCK_START======
function setAnalogueGain(val)
    -- vts 0x0204 0x0205
    local gain = math.floor(1024 - 1024 / (val / 100))

	writeReg(0x0204, (gain & 0xFF00) >> 8)
    writeReg(0x0205, (gain & 0x00FF) >> 0)
end
======CODE_BLOCK_END======
;**************************************************************************************/
; ----- board parameter -----
;
; -- Keyname description:
; VRCMD = set board parameter by vendor command 
; 
; -- Keyname format:
; VRCMD = <command>, <value>, <index>, <dataNumber>[, <data1>[, <data2>[, <data3>[, <data4>]]]] 		//<comment>
;
; <command>     
; <value>      
; <index>         
; <dataNumber>  
; <dataN>      
; <comment>    Some form of C-style comments are supported in this .cfg file
;
;**************************************************************************************/
[board parameter]
VRCMD = 0xD7, 0x4600, 0x0100, 1, 0x45
VRCMD = 0xD7, 0x4600, 0x0200, 1, 0x00
VRCMD = 0xD7, 0x4600, 0x0300, 1, 0xC0
VRCMD = 0xD7, 0x4600, 0x0300, 1, 0x40
VRCMD = 0xD7, 0x4600, 0x0400, 1, 0x11
VRCMD = 0xD7, 0x4600, 0x0A00, 1, 0x01
VRCMD = 0xD7, 0x4600, 0x0C00, 1, 0x91
VRCMD = 0xD7, 0x4600, 0x0D00, 1, 0x0F
VRCMD = 0xD7, 0x4600, 0x0E00, 1, 0xC0
VRCMD = 0xD7, 0x4600, 0x0F00, 1, 0x0B
VRCMD = 0xD7, 0x4600, 0x1000, 1, 0xE0
VRCMD = 0xD7, 0x4600, 0x1100, 1, 0x03
VRCMD = 0xD7, 0x4600, 0x2300, 1, 0x01

[board parameter][dev2]
VRCMD = 0xF6, 0x0000, 0x0000, 3, 0x03, 0x04, 0x0C

[board parameter][dev3][inf2]
VRCMD = 0xD7, 0x4600, 0x0300, 1, 0x00
VRCMD = 0xD7, 0x4600, 0x0400, 1, 0x25
VRCMD = 0xF3, 0x0000, 0x0000, 0
VRCMD = 0xF9, 0x0004, 0x0000, 0

[board parameter][dev3][inf3]
VRCMD = 0xD7, 0x4600, 0x0300, 1, 0x00
VRCMD = 0xD7, 0x4600, 0x0400, 1, 0x00
VRCMD = 0xF3, 0x0000, 0x0000, 0
VRCMD = 0xF9, 0x0004, 0x0000, 0


;**************************************************************************************/
; ----- register parameter -----
;
; -- Keyname description:
; REG    = assign a new register value
; DELAY  = delay a certain amount of milliseconds before continuing
; BITSET = do a set operation to part of a register. The part is defined as a mask.
; BITCLR = do a reset operation to part of a register. The part is defined as a mask.
;
; -- Keyname format:
; REG    = [<page>,] <address>, <value>             //<comment>
; DELAY  = <milliseconds>
; BITSET = [<page>,] <address>, <mask>
; BITCLR = [<page>,] <address>, <mask>
;
; <page>         Optional address space for this register. Some sensors (mostly SOC's)
;                have multiple register pages (see the sensor spec or developers guide)
; <address>      the register address
; <value>        the new value to assign to the register
; <mask>         is the part of a register value that needs to be updated with a new value
; <milliseconds> wait for this ammount of milliseconds before continuing 
; <comment>      Some form of C-style comments are supported in this .cfg file
;
;**************************************************************************************/
[register parameter]
REG = 0X0103, 0X01
DELAY = 100
//Power ON	
//Input EXTCLK	
//XCLR OFF	
//External Clock Setting	
	
REG = 0x0136, 0x18
REG = 0x0137, 0x00
	
	
//Global Setting	
REG = 0x38A8, 0x1F
REG = 0x38A9, 0xFF
REG = 0x38AA, 0x1F
REG = 0x38AB, 0xFF
REG = 0x55D4, 0x00
REG = 0x55D5, 0x00
REG = 0x55D6, 0x07
REG = 0x55D7, 0xFF
REG = 0x55E8, 0x07
REG = 0x55E9, 0xFF
REG = 0x55EA, 0x00
REG = 0x55EB, 0x00
REG = 0x575C, 0x07
REG = 0x575D, 0xFF
REG = 0x575E, 0x00
REG = 0x575F, 0x00
REG = 0x5764, 0x00
REG = 0x5765, 0x00
REG = 0x5766, 0x07
REG = 0x5767, 0xFF
REG = 0x5974, 0x04
REG = 0x5975, 0x01
REG = 0x5F10, 0x09
REG = 0x5F11, 0x92
REG = 0x5F12, 0x32
REG = 0x5F13, 0x72
REG = 0x5F14, 0x16
REG = 0x5F15, 0xBA
REG = 0x5F17, 0x13
REG = 0x5F18, 0x24
REG = 0x5F19, 0x60
REG = 0x5F1A, 0xE3
REG = 0x5F1B, 0xAD
REG = 0x5F1C, 0x74
REG = 0x5F2D, 0x25
REG = 0x5F5C, 0xD0
REG = 0x6A22, 0x00
REG = 0x6A23, 0x1D
REG = 0x7BA8, 0x00
REG = 0x7BA9, 0x00
REG = 0x886B, 0x00
REG = 0x9002, 0x0A
REG = 0x9004, 0x1A
REG = 0x9214, 0x93
REG = 0x9215, 0x69
REG = 0x9216, 0x93
REG = 0x9217, 0x6B
REG = 0x9218, 0x93
REG = 0x9219, 0x6D
REG = 0x921A, 0x57
REG = 0x921B, 0x58
REG = 0x921C, 0x57
REG = 0x921D, 0x59
REG = 0x921E, 0x57
REG = 0x921F, 0x5A
REG = 0x9220, 0x57
REG = 0x9221, 0x5B
REG = 0x9222, 0x93
REG = 0x9223, 0x02
REG = 0x9224, 0x93
REG = 0x9225, 0x03
REG = 0x9226, 0x93
REG = 0x9227, 0x04
REG = 0x9228, 0x93
REG = 0x9229, 0x05
REG = 0x922A, 0x98
REG = 0x922B, 0x21
REG = 0x922C, 0xB2
REG = 0x922D, 0xDB
REG = 0x922E, 0xB2
REG = 0x922F, 0xDC
REG = 0x9230, 0xB2
REG = 0x9231, 0xDD
REG = 0x9232, 0xB2
REG = 0x9233, 0xE1
REG = 0x9234, 0xB2
REG = 0x9235, 0xE2
REG = 0x9236, 0xB2
REG = 0x9237, 0xE3
REG = 0x9238, 0xB7
REG = 0x9239, 0xB9
REG = 0x923A, 0xB7
REG = 0x923B, 0xBB
REG = 0x923C, 0xB7
REG = 0x923D, 0xBC
REG = 0x923E, 0xB7
REG = 0x923F, 0xC5
REG = 0x9240, 0xB7
REG = 0x9241, 0xC7
REG = 0x9242, 0xB7
REG = 0x9243, 0xC9
REG = 0x9244, 0x98
REG = 0x9245, 0x56
REG = 0x9246, 0x98
REG = 0x9247, 0x55
REG = 0x9380, 0x00
REG = 0x9381, 0x62
REG = 0x9382, 0x00
REG = 0x9383, 0x56
REG = 0x9384, 0x00
REG = 0x9385, 0x52
REG = 0x9388, 0x00
REG = 0x9389, 0x55
REG = 0x938A, 0x00
REG = 0x938B, 0x55
REG = 0x938C, 0x00
REG = 0x938D, 0x41
REG = 0x5078, 0x01
	
//2Lane	
//Full resolution 4056x3040 RAW10 12fps	@100MHz
//H: 4056	
//V: 3040	
//MIPI setting	
	
REG = 0x0112, 0x0A
REG = 0x0113, 0x0A
REG = 0x0114, 0x01
	
	
//Frame Horizontal Clock Count	
	
REG = 0x0342, 0x49
REG = 0x0343, 0xa8
REG = 0x0350, 0x00
	
//Frame Vertical Clock Count	
	
REG = 0x0340, 0x0C
REG = 0x0341, 0x1E
REG = 0x3210, 0x00
	
	
//Visible Size	
	
REG = 0x0344, 0x00
REG = 0x0345, 0x00
REG = 0x0346, 0x00
REG = 0x0347, 0x00
REG = 0x0348, 0x0F
REG = 0x0349, 0xD7
REG = 0x034A, 0x0B
REG = 0x034B, 0xDF
	
	
//Mode Setting	
REG = 0x0220, 0x00
REG = 0x0221, 0x11
REG = 0x0381, 0x01
REG = 0x0383, 0x01
REG = 0x0385, 0x01
REG = 0x0387, 0x01
REG = 0x0900, 0x00
REG = 0x0901, 0x11
REG = 0x0902, 0x00
REG = 0x3140, 0x02

//378 only
//REG = 0x3c00, 0x00
//REG = 0x3c01, 0x03
//REG = 0x3c02, 0xDC
//REG = 0x3F0D, 0x00
//REG = 0x5748, 0x07
//REG = 0x5749, 0xFF
//REG = 0x574a, 0x00
//REG = 0x574b, 0x00
//REG = 0x7B53, 0x01
//REG = 0x9369, 0x5A
//REG = 0x936B, 0x55
//REG = 0x936D, 0x28
//REG = 0x9304, 0x00
//REG = 0x9305, 0x00
//REG = 0x9E9A, 0x2F
//REG = 0x9E9B, 0x2F
//REG = 0x9E9C, 0x2F
//REG = 0x9E9D, 0x00
//REG = 0x9E9E, 0x00
//REG = 0x9E9F, 0x00
//REG = 0xA2A9, 0x60
//REG = 0xA2B7, 0x00

//477 only
//REG = 0x3C00, 0x00
//REG = 0x3C01, 0x01
//REG = 0x3C02, 0x9C
//REG = 0x3F0D, 0x00
//REG = 0x5748, 0x00
//REG = 0x5749, 0x00
//REG = 0x574A, 0x00
//REG = 0x574B, 0xA4
//REG = 0x7B75, 0x0E
//REG = 0x7B76, 0x09
//REG = 0x7B77, 0x08
//REG = 0x7B78, 0x06
//REG = 0x7B79, 0x34
//REG = 0x7B53, 0x00
//REG = 0x9369, 0x73
//REG = 0x936B, 0x64
//REG = 0x936D, 0x5F
//REG = 0x9304, 0x03
//REG = 0x9305, 0x80
//REG = 0x9E9A, 0x2F
//REG = 0x9E9B, 0x2F
//REG = 0x9E9C, 0x2F
//REG = 0x9E9D, 0x00
//REG = 0x9E9E, 0x00
//REG = 0x9E9F, 0x00
//REG = 0xA2A9, 0x27
//REG = 0xA2B7, 0x03

//577 only
//REG = 0x3241, 0x11
//REG = 0x3250, 0x03
//REG = 0x3E10, 0x00
//REG = 0x3E11, 0x00
//REG = 0x3F0D, 0x00
//REG = 0x3F42, 0x00
//REG = 0x3F43, 0x00
	
	
//Digital Crop & Scaling	
	
REG = 0x0401, 0x00
REG = 0x0404, 0x00
REG = 0x0405, 0x10
REG = 0x0408, 0x00
REG = 0x0409, 0x00
REG = 0x040A, 0x00
REG = 0x040B, 0x00
REG = 0x040C, 0x0F
REG = 0x040D, 0xD8
REG = 0x040E, 0x0B
REG = 0x040F, 0xE0
	
	
//Output Crop	
	
REG = 0x034C, 0x0F
REG = 0x034D, 0xD8
REG = 0x034E, 0x0B
REG = 0x034F, 0xE0
	
	
//Clock Setting	
	
# REG = 0x0301, 0x05
# REG = 0x0303, 0x02
# REG = 0x0305, 0x04
# REG = 0x0306, 0x00  //01
# REG = 0x0307, 0x86  //5E
# REG = 0x0309, 0x0A
# REG = 0x030B, 0x01
# REG = 0x030D, 0x02
# REG = 0x030E, 0x00  //01
# REG = 0x030F, 0x86  //5E
# REG = 0x0310, 0x00

//114MHz
REG = 0x0301, 0x05  //VT_PIX_CLK_DIV
REG = 0x0303, 0x02  //VTSYCK_DIV
REG = 0x0305, 0x04  //VT_PRE_PLL_DIV
REG = 0x0306, 0x01  //VT_PLL_MULTIPLER
REG = 0x0307, 0x00
REG = 0x0309, 0x08  //OP_PIX_CLK_DIV
REG = 0x030b, 0x02  //OPSYCK_DIV
REG = 0x030d, 0x02  //OP_PRE_PLL_DIV
REG = 0x030e, 0x00  //OP_PLL_MULTIPLER
REG = 0x030f, 0X98  //0x96
REG = 0x0310, 0x01
REG = 0x0820, 0x20
REG = 0x0821, 0xD0
REG = 0x0822, 0x00
REG = 0x0823, 0x00
	
	
//Output Data Select Setting	
	
REG = 0x3E20, 0x01
REG = 0x3E37, 0x00
	
	
//PowerSave Setting	
	
REG = 0x3F50, 0x00
REG = 0x3F56, 0x00
REG = 0x3F57, 0x82
	
	
//Other Setting	
	
	
	
//Integration Time Setting	
	
REG = 0x0202, 0x0C
REG = 0x0203, 0x08
	
	
//Gain Setting	
	
REG = 0x0204, 0x00
REG = 0x0205, 0x00
REG = 0x020E, 0x01
REG = 0x020F, 0x00
REG = 0x0210, 0x01
REG = 0x0211, 0x00
REG = 0x0212, 0x01
REG = 0x0213, 0x00
REG = 0x0214, 0x01
REG = 0x0215, 0x00






REG = 0x0100, 0x01




"""


ErrorCode_Map = {
    0x0000: "USB_CAMERA_NO_ERROR",
    0xFF01: "USB_CAMERA_USB_CREATE_ERROR",
    0xFF02: "USB_CAMERA_USB_SET_CONTEXT_ERROR",
    0xFF03: "USB_CAMERA_VR_COMMAND_ERROR",
    0xFF04: "USB_CAMERA_USB_VERSION_ERROR",
    0xFF05: "USB_CAMERA_BUFFER_ERROR",
    0xFF06: "USB_CAMERA_NOT_FOUND_DEVICE_ERROR",
    0xFF0B: "USB_CAMERA_I2C_BIT_ERROR",
    0xFF0C: "USB_CAMERA_I2C_NACK_ERROR",
    0xFF0D: "USB_CAMERA_I2C_TIMEOUT",
    0xFF20: "USB_CAMERA_USB_TASK_ERROR",
    0xFF21: "USB_CAMERA_DATA_OVERFLOW_ERROR",
    0xFF22: "USB_CAMERA_DATA_LACK_ERROR",
    0xFF23: "USB_CAMERA_FIFO_FULL_ERROR",
    0xFF24: "USB_CAMERA_DATA_LEN_ERROR",
    0xFF25: "USB_CAMERA_FRAME_INDEX_ERROR",
    0xFF26: "USB_CAMERA_USB_TIMEOUT_ERROR",
    0xFF30: "USB_CAMERA_READ_EMPTY_ERROR",
    0xFF31: "USB_CAMERA_DEL_EMPTY_ERROR",
    0xFF51: "USB_CAMERA_SIZE_EXCEED_ERROR",
    0xFF61: "USB_USERDATA_ADDR_ERROR",
    0xFF62: "USB_USERDATA_LEN_ERROR",
    0xFF71: "USB_BOARD_FW_VERSION_NOT_SUPPORT_ERROR"
}


def setPath():
    logPath = ''
    if getattr(sys, 'frozen', False):
        dirname = Path(sys.executable).resolve().parent
        logPath = dirname / 'logs.txt'
    elif __file__:
        logPath = Path("./logs.txt")
    logger.add(logPath.as_posix(), rotation='10 MB')


setPath()


@logger.catch
def GetErrorString(ErrorCode):
    return ErrorCode_Map[ErrorCode]


@logger.catch
def configBoard(handle, config):
    ArducamSDK.Py_ArduCam_setboardConfig(handle, config.params[0],
                                         config.params[1], config.params[2], config.params[3],
                                         config.params[4:config.params_length])


@logger.catch
def camera_initFromFile(fileName, index):
    # load config file
    config = arducam_config_parser.LoadConfigFile(fileName)

    camera_parameter = config.camera_param.getdict()
    width = camera_parameter["WIDTH"]
    height = camera_parameter["HEIGHT"]

    BitWidth = camera_parameter["BIT_WIDTH"]
    ByteLength = 1
    if BitWidth > 8 and BitWidth <= 16:
        ByteLength = 2
    FmtMode = camera_parameter["FORMAT"][0]
    color_mode = camera_parameter["FORMAT"][1]
    logger.info("color mode: {}".format(color_mode))

    I2CMode = camera_parameter["I2C_MODE"]
    I2cAddr = camera_parameter["I2C_ADDR"]
    TransLvl = camera_parameter["TRANS_LVL"]
    cfg = {"u32CameraType": 0x00,
           "u32Width": width, "u32Height": height,
           "usbType": 0,
           "u8PixelBytes": ByteLength,
           "u16Vid": 0,
           "u32Size": 0,
           "u8PixelBits": BitWidth,
           "u32I2cAddr": I2cAddr,
           "emI2cMode": I2CMode,
           "emImageFmtMode": FmtMode,
           "u32TransLvl": TransLvl}

    ret, handle, rtn_cfg = ArducamSDK.Py_ArduCam_open(cfg, index)
    # ret, handle, rtn_cfg = ArducamSDK.Py_ArduCam_autoopen(cfg)
    if ret == 0:

        # ArducamSDK.Py_ArduCam_writeReg_8_8(handle,0x46,3,0x00)
        usb_version = rtn_cfg['usbType']
        configs = config.configs
        configs_length = config.configs_length
        for i in range(configs_length):
            type = configs[i].type
            if ((type >> 16) & 0xFF) != 0 and ((type >> 16) & 0xFF) != usb_version:
                continue
            if type & 0xFFFF == arducam_config_parser.CONFIG_TYPE_REG:
                # print(" 0x{:04X}, 0x{:02X}".format(configs[i].params[0], configs[i].params[1]))
                ArducamSDK.Py_ArduCam_writeSensorReg(
                    handle, configs[i].params[0], configs[i].params[1])
            elif type & 0xFFFF == arducam_config_parser.CONFIG_TYPE_DELAY:
                time.sleep(float(configs[i].params[0]) / 1000)
            elif type & 0xFFFF == arducam_config_parser.CONFIG_TYPE_VRCMD:
                configBoard(handle, configs[i])

        ArducamSDK.Py_ArduCam_registerCtrls(
            handle, config.controls, config.controls_length)

        rtn_val, datas = ArducamSDK.Py_ArduCam_readUserData(
            handle, 0x400 - 16, 16)
        logger.info("Serial: %c%c%c%c-%c%c%c%c-%c%c%c%c" % (datas[0], datas[1], datas[2], datas[3],
                                                      datas[4], datas[5], datas[6], datas[7],
                                                      datas[8], datas[9], datas[10], datas[11]))

        return True, handle, rtn_cfg, color_mode

    logger.info("open fail, Error : {}".format(GetErrorString(ret)))
    return False, handle, rtn_cfg, color_mode


@logger.catch
def camera_initCPLD(fileName, index):
    # load config file
    config = arducam_config_parser.LoadConfigFile(fileName)

    camera_parameter = config.camera_param.getdict()
    width = camera_parameter["WIDTH"]
    height = camera_parameter["HEIGHT"]

    BitWidth = camera_parameter["BIT_WIDTH"]
    ByteLength = 1
    if 8 < BitWidth <= 16:
        ByteLength = 2
    FmtMode = camera_parameter["FORMAT"][0]
    color_mode = camera_parameter["FORMAT"][1]
    logger.info("color mode: {}".format(color_mode))

    I2CMode = camera_parameter["I2C_MODE"]
    I2cAddr = camera_parameter["I2C_ADDR"]
    TransLvl = camera_parameter["TRANS_LVL"]
    cfg = {"u32CameraType": 0x00,
           "u32Width": width, "u32Height": height,
           "usbType": 0,
           "u8PixelBytes": ByteLength,
           "u16Vid": 0,
           "u32Size": 0,
           "u8PixelBits": BitWidth,
           "u32I2cAddr": I2cAddr,
           "emI2cMode": I2CMode,
           "emImageFmtMode": FmtMode,
           "u32TransLvl": TransLvl}

    ret, handle, rtn_cfg = ArducamSDK.Py_ArduCam_open(cfg, index)
    # ret, handle, rtn_cfg = ArducamSDK.Py_ArduCam_autoopen(cfg)

    if ret == 0:
        configs = config.configs
        configs_length = config.configs_length
        for i in range(configs_length):
            type = configs[i].type
            if ((type >> 16) & 0xFF) != 0 and ((type >> 16) & 0xFF) != rtn_cfg['usbType']:
                continue
            if type & 0xFFFF == arducam_config_parser.CONFIG_TYPE_DELAY:
                time.sleep(float(configs[i].params[0]) / 1000)
            elif type & 0xFFFF == arducam_config_parser.CONFIG_TYPE_VRCMD:
                configBoard(handle, configs[i])
        return True, handle, rtn_cfg, config, I2cAddr, color_mode

    logger.error("initialize fail, Error : {}".format(GetErrorString(ret)))
    return False, handle, rtn_cfg, config, I2cAddr, color_mode


@logger.catch
def camera_initSensor(handle, readConfig, usb_version, I2cAddr):
    # ArducamSDK.Py_ArduCam_writeReg_8_8(handle,0x46,3,0x00)
    # usb_version = rtn_cfg['usbType']
    configs = readConfig.configs
    configs_length = readConfig.configs_length
    for i in range(configs_length):
        type = configs[i].type
        if ((type >> 16) & 0xFF) != 0 and ((type >> 16) & 0xFF) != usb_version:
            continue
        if type & 0xFFFF == arducam_config_parser.CONFIG_TYPE_REG:
            # print(f" {configs[i].params[0]}, {configs[i].params[1]}")
            ArducamSDK.Py_ArduCam_writeSensorReg(
                handle, configs[i].params[0], configs[i].params[1])
        elif type & 0xFFFF == arducam_config_parser.CONFIG_TYPE_DELAY:
            time.sleep(float(configs[i].params[0]) / 1000)
        # elif type & 0xFFFF == arducam_config_parser.CONFIG_TYPE_VRCMD:
        #     configBoard(handle, configs[i])

    ArducamSDK.Py_ArduCam_registerCtrls(
        handle, readConfig.controls, readConfig.controls_length)

    rtn_val, datas = ArducamSDK.Py_ArduCam_readUserData(
        handle, 0x400 - 16, 16)
    logger.info("Serial: %c%c%c%c-%c%c%c%c-%c%c%c%c" % (datas[0], datas[1], datas[2], datas[3],
                                                  datas[4], datas[5], datas[6], datas[7],
                                                  datas[8], datas[9], datas[10], datas[11]))


@logger.catch
def DetectI2c(camera):
    ret = 0
    value_hi = 0
    value_lo = 0
    if camera is not None:
        # ret, value = ArducamSDK.Py_ArduCam_readSensorReg(camera.handle, 0x0F12)
        # logger.info("0x{:02x}".format(value))
        ret, value = ArducamSDK.Py_ArduCam_readReg_8_8(camera.handle, camera.I2cAddr, 0x00)
        # ret, value_hi = ArducamSDK.Py_ArduCam_readSensorReg(camera.handle, 0x0000)
        # logger.info(f"ret: {ret}, value_H: {value_hi:02X}")
        # ret, value_lo = ArducamSDK.Py_ArduCam_readSensorReg(camera.handle, 0x0001)
        # logger.info(f"ret: {ret}, value_L: {value_lo:02X}")
    # return value_hi == 0x01 and value_lo == 0xB0
    logger.info("ret: {}, i2c addr: 0x{:02X}".format(ret, camera.I2cAddr))
    return not ret


@logger.catch
def cv2AddChineseText(img, text, position, textColor=(0, 255, 0), textSize=30):
    if isinstance(img, np.ndarray):
        img = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    draw = ImageDraw.Draw(img)
    fontStyle = ImageFont.truetype("font/simsun.ttc", textSize, encoding="utf-8")
    draw.text(position, text, textColor, font=fontStyle)
    return cv2.cvtColor(np.asarray(img), cv2.COLOR_RGB2BGR)
