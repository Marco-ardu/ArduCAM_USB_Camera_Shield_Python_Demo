import sys
from pathlib import Path

import ArducamSDK
import arducam_config_parser
import time

import cv2
from PIL import ImageDraw, ImageFont, Image
import numpy as np
from loguru import logger


usb_config = """
;**************************************************************************************/
; ----- camera parameter -----
; [camera parameter]	Camera parameter set for USB2.0 & USB3.0 mode
;
; -- Keyname description:
; CFG_MODE  = set the config mode for camera: 0 -> User define(UI)
;											  1 -> This config File
; TYPE      = set the name of the camera module
; SIZE		= set the width and height of the image generated by camera 
; BIT_WIDTH = set the bit width of the image generated by camera 
; FORMAT    = set the format of the image generated by camera:
;				| 0 -> RAW	  | 1 -> RGB565  | 2 -> YUV422   | 3 -> JPG  | 4 -> MONO  | 5 -> ST_RAW	| 6 -> ST_MONO |  
;				| -- 0 -> RG  | -- 0 -> RGB  | -- 0 -> YUYV  |           | 			  | -- 0 -> RG  | 			   |  
;				| -- 1 -> GR  | -- 1 -> BGR  | -- 1 -> YVYU  |           | 			  | -- 1 -> GR  | 			   |  
;				| -- 2 -> GB  |              | -- 2 -> UYVY  |           |			  | -- 2 -> GB  |			   |  
;				| -- 3 -> BG  |              | -- 3 -> VYUY  |           | 			  | -- 3 -> BG  | 			   |  
; I2C_MODE  = set the bit width of the address and data of I2C communication: 
;				0 ->  8 bit address &  8 bit value				
;				1 ->  8 bit address & 16 bit value
;				2 -> 16 bit address &  8 bit value
;				3 -> 16 bit address & 16 bit value		
; I2C_ADDR  = set the I2C address for register config of camera 
; G_GAIN    = set the address for green1_gain register config of camera	( RAW & RGB565 & ST_RAW mode )
; B_GAIN    = set the address for blue_gain register config of camera	( RAW & RGB565 & ST_RAW mode )
; R_GAIN    = set the address for red_gain register config of camera	( RAW & RGB565 & ST_RAW mode )
; G2_GAIN   = set the address for green2_gain register config of camera	( RAW & ST_RAW mode )
; Y_GAIN    = set the address for Y_gain register config of camera		( YUV422 mode )
; U_GAIN    = set the address for U_gain register config of camera		( YUV422 mode )
; V_GAIN    = set the address for V_gain register config of camera		( YUV422 mode )
; GL_GAIN   = set the address for global_gain register config of camera
; 
; -- Keyname format:
; CFG_MODE  = <value1>							;<comment>
; TYPE      = <value1>
; SIZE		= <width>, <height>
; BIT_WIDTH = <bitWidth>
; FORMAT    = <value1>[, <value2>]
; I2C_MODE  = <value1>
; I2C_ADDR  = <i2cAddress> 
; G_GAIN    = [<page>,] <address>, <minValue>, <maxValue>
; B_GAIN    = [<page>,] <address>, <minValue>, <maxValue>
; R_GAIN    = [<page>,] <address>, <minValue>, <maxValue>
; G2_GAIN   = [<page>,] <address>, <minValue>, <maxValue>
; Y_GAIN    = [<page>,] <address>, <minValue>, <maxValue>
; U_GAIN    = [<page>,] <address>, <minValue>, <maxValue>
; V_GAIN    = [<page>,] <address>, <minValue>, <maxValue>
; GL_GAIN   = [<page>,] <address>, <minValue>, <maxValue>
; 
; <valueN>		Index value representing certain meanings 
; <width>		Width of the image generated by camera
; <height>		Height of the image generated by camera
; <bitWidth>	Bit width of the image generated by camera
; <i2cAddress>	I2C address for register config of camera
; <page>        Optional address space for this register. Some sensors (mostly SOC's)
;               have multiple register pages (see the sensor spec or developers guide)
; <address>     The register address 
; <minValue>	Minimale value of certain address
; <maxValue>	Maximale value of certain address
; <comment>    	Some form of C-style comments are supported in this .cfg file
; 
;**************************************************************************************/
[camera parameter]
CFG_MODE  = 0	
TYPE      = HM01B0
SIZE      = 972, 244
BIT_WIDTH = 8 
FORMAT    = 0,0	
I2C_MODE  = 2					
I2C_ADDR  = 0x48		
;TRANS_LVL = 64	

;**************************************************************************************/
; ----- board parameter -----
;[board parameter]					Board parameter set for USB2.0 & USB3.0 mode	
;[board parameter][dev2]			Board parameter set for USB2.0 mode
;[board parameter][dev3][inf2]		Board parameter set for USB3.0 mode and USB2.0 interface
;[board parameter][dev3][inf3]		Board parameter set for USB3.0 mode and USB3.0 interface
;
; -- Keyname description:
; VRCMD = set board parameter by vendor command 
; 
; -- Keyname format:
; VRCMD = <command>, <value>, <index>, <dataNumber>[, <data1>[, <data2>[, <data3>[, <data4>]]]] 		//<comment>
;
; <command>    Value representing certain command 
; <value>      value representing certain meanings
; <index>      Index representing certain meanings   
; <dataNumber> Number of <dataN>
; <dataN>      Data representing certain meanings
; <comment>    Some form of C-style comments are supported in this .cfg file
;
;**************************************************************************************/
[board parameter]
VRCMD = 0xD7, 0x4600, 0x0100, 1, 0x05
VRCMD = 0xD7, 0x4600, 0x0200, 1, 0x00
VRCMD = 0xD7, 0x4600, 0x0300, 1, 0x40
VRCMD = 0xD7, 0x4600, 0x0400, 1, 0x00
VRCMD = 0xD7, 0x4600, 0x0C00, 1, 0x00
VRCMD = 0xD7, 0x4600, 0x0D00, 1, 0x01
VRCMD = 0xD7, 0x4600, 0x0E00, 1, 0x44
VRCMD = 0xD7, 0x4600, 0x0F00, 1, 0x00
VRCMD = 0xD7, 0x4600, 0x1000, 1, 0xF4
VRCMD = 0xD7, 0x4600, 0x0A00, 1, 0x00

;VRCMD = 0xD7, 0x4A00, 0x0000, 1, 0x00

[board parameter][dev2]
VRCMD = 0xF6, 0x0000, 0x0000, 3, 0x03, 0x04, 0x0C

[board parameter][dev3][inf2]
VRCMD = 0xD7, 0x4600, 0x0300, 1, 0x00
VRCMD = 0xD7, 0x4600, 0x0400, 1, 0x00
VRCMD = 0xF3, 0x0000, 0x0000, 0
VRCMD = 0xF9, 0x0004, 0x0000, 0


[board parameter][dev3][inf3]
VRCMD = 0xD7, 0x4600, 0x0300, 1, 0x00
VRCMD = 0xD7, 0x4600, 0x0400, 1, 0x00
VRCMD = 0xF3, 0x0000, 0x0000, 0
VRCMD = 0xF9, 0x0004, 0x0000, 0

;**************************************************************************************/
; ----- register parameter -----
;
; -- Keyname description:
; REG    = assign a new register value
; DELAY  = delay a certain amount of milliseconds before continuing
; BITSET = do a set operation to part of a register. The part is defined as a mask.
; BITCLR = do a reset operation to part of a register. The part is defined as a mask.
;
; -- Keyname format:
; REG    = [<page>,] <address>, <value>             //<comment>
; DELAY  = <milliseconds>
; BITSET = [<page>,] <address>, <mask>
; BITCLR = [<page>,] <address>, <mask>
;
; <page>         Optional address space for this register. Some sensors (mostly SOC's)
;                have multiple register pages (see the sensor spec or developers guide)
; <address>      the register address
; <value>        the new value to assign to the register
; <mask>         is the part of a register value that needs to be updated with a new value
; <milliseconds> wait for this ammount of milliseconds before continuing 
; <comment>      Some form of C-style comments are supported in this .cfg file
;
;**************************************************************************************/
[register parameter]

//---------------------------------//
REG = 0x0103,0x00

REG = 0x0100,0x00 

//---------------------------------//
REG = 0x2100,0x00   //bit[0]:AE EN.  1:on  0:off
//---------------------------------//
REG = 0x1003,0x08
REG = 0x1007,0x08 
REG = 0x3044,0x0A     
REG = 0x3045,0x00    
REG = 0x3047,0x0A    
REG = 0x3050,0xC0    
REG = 0x3051,0x42 
REG = 0x3052,0x50
REG = 0x3053,0x00
REG = 0x3054,0x03 
REG = 0x3055,0xF7
REG = 0x3056,0xF8
REG = 0x3057,0x29
REG = 0x3058,0x1F
REG = 0x3059,0x1E
REG = 0x3064,0x00
REG = 0x3065,0x04
REG = 0x1000,0x43
REG = 0x1001,0x40
REG = 0x1002,0x32 
REG = 0x0350,0x7F
REG = 0x1006,0x01
REG = 0x1008,0x00
REG = 0x1009,0xA0
REG = 0x100A,0x60
REG = 0x100B,0x90
REG = 0x100C,0x40
REG = 0x3022,0x01
REG = 0x1012,0x01
REG = 0x2000,0x07
REG = 0x2003,0x00 
REG = 0x2004,0x1C
REG = 0x2007,0x00 
REG = 0x2008,0x58 
REG = 0x200B,0x00 
REG = 0x200C,0x7A 
REG = 0x200F,0x00
REG = 0x2010,0xB8
REG = 0x2013,0x00
REG = 0x2014,0x58
REG = 0x2017,0x00
REG = 0x2018,0x9B
//REG = 0x2100,0x00   //bit[0]:AE EN.  1:on  0:off
REG = 0x2101,0x5F
REG = 0x2102,0x0A
REG = 0x2103,0x03
REG = 0x2104,0x05
REG = 0x2105,0x02
REG = 0x2106,0x14
REG = 0x2107,0x02
REG = 0x2108,0x03
REG = 0x2109,0x03
REG = 0x210A,0x00
REG = 0x210B,0x80
REG = 0x210C,0x40
REG = 0x210D,0x20
REG = 0x210E,0x03
REG = 0x210F,0x00
REG = 0x2110,0x85
REG = 0x2111,0x00
REG = 0x2112,0xA0
REG = 0x2150,0x03
REG = 0x0340,0x00   //VTS[15:8]
REG = 0x0341,0x80   //VTS[7:0]
REG = 0x0342,0x01   //HTS[15:8]
REG = 0x0343,0x77   //HTS[7:0]
REG = 0x3010,0x01
REG = 0x0383,0x01
REG = 0x0387,0x01
REG = 0x0390,0x00
REG = 0x3011,0x70
REG = 0x3059,0x02
REG = 0x3060,0x21
REG = 0x0101,0x01 
REG = 0x0104,0x01

//---------------------------------//

//bit[0]： pclk polarity
//0：rising edge;  1：falling edge
REG = 0x3068,0x00


//bit[6:5]： 00：8b   10：4b   01：1b
REG = 0x3059,0x40   //4b
//REG = 0x3059,0x20 //1b


//bit[5]： 0：Non-gated  1：Gated clk
//bit[4]： 0：LSB  1：MSB
REG = 0x3060,0x10


REG = 0x0202, 0x00  //INTEGRATION[15:8]
REG = 0x0203, 0x80  //INTEGRATION[7:0]

REG = 0x0205, 0x00  //ANALOG_GAIN[6:4]

REG = 0x020E, 0x01  //DIGITAL_GAIN[9:8]
REG = 0x020F, 0x00  //DIGITAL_GAIN[7:0]
//---------------------------------//
//stream on

//REG = 0x0100,0x01
//---------------------------------//
REG = 0x3064,0x04   //bit[2]: trigger mode en
REG = 0x0100,0x05   //hardware trigger
REG = 0x3060,0x1D   //The divider 0x3060[3:2] should be set to 2.


//---------------------------------//


[register parameter][dev3][inf2]


[register parameter][dev3][inf3]


"""


ErrorCode_Map = {
    0x0000: "USB_CAMERA_NO_ERROR",
    0xFF01: "USB_CAMERA_USB_CREATE_ERROR",
    0xFF02: "USB_CAMERA_USB_SET_CONTEXT_ERROR",
    0xFF03: "USB_CAMERA_VR_COMMAND_ERROR",
    0xFF04: "USB_CAMERA_USB_VERSION_ERROR",
    0xFF05: "USB_CAMERA_BUFFER_ERROR",
    0xFF06: "USB_CAMERA_NOT_FOUND_DEVICE_ERROR",
    0xFF0B: "USB_CAMERA_I2C_BIT_ERROR",
    0xFF0C: "USB_CAMERA_I2C_NACK_ERROR",
    0xFF0D: "USB_CAMERA_I2C_TIMEOUT",
    0xFF20: "USB_CAMERA_USB_TASK_ERROR",
    0xFF21: "USB_CAMERA_DATA_OVERFLOW_ERROR",
    0xFF22: "USB_CAMERA_DATA_LACK_ERROR",
    0xFF23: "USB_CAMERA_FIFO_FULL_ERROR",
    0xFF24: "USB_CAMERA_DATA_LEN_ERROR",
    0xFF25: "USB_CAMERA_FRAME_INDEX_ERROR",
    0xFF26: "USB_CAMERA_USB_TIMEOUT_ERROR",
    0xFF30: "USB_CAMERA_READ_EMPTY_ERROR",
    0xFF31: "USB_CAMERA_DEL_EMPTY_ERROR",
    0xFF51: "USB_CAMERA_SIZE_EXCEED_ERROR",
    0xFF61: "USB_USERDATA_ADDR_ERROR",
    0xFF62: "USB_USERDATA_LEN_ERROR",
    0xFF71: "USB_BOARD_FW_VERSION_NOT_SUPPORT_ERROR"
}


def setPath():
    logPath = ''
    if getattr(sys, 'frozen', False):
        dirname = Path(sys.executable).resolve().parent
        logPath = dirname / 'logs.txt'
    elif __file__:
        logPath = Path("./logs.txt")
    logger.add(logPath.as_posix(), rotation='10 MB')


setPath()


@logger.catch
def GetErrorString(ErrorCode):
    return ErrorCode_Map[ErrorCode]


@logger.catch
def configBoard(handle, config):
    ArducamSDK.Py_ArduCam_setboardConfig(handle, config.params[0],
                                         config.params[1], config.params[2], config.params[3],
                                         config.params[4:config.params_length])


@logger.catch
def camera_initFromFile(fileName, index):
    # load config file
    config = arducam_config_parser.LoadConfigFile(fileName)

    camera_parameter = config.camera_param.getdict()
    width = camera_parameter["WIDTH"]
    height = camera_parameter["HEIGHT"]

    BitWidth = camera_parameter["BIT_WIDTH"]
    ByteLength = 1
    if BitWidth > 8 and BitWidth <= 16:
        ByteLength = 2
    FmtMode = camera_parameter["FORMAT"][0]
    color_mode = camera_parameter["FORMAT"][1]
    logger.info("color mode: {}".format(color_mode))

    I2CMode = camera_parameter["I2C_MODE"]
    I2cAddr = camera_parameter["I2C_ADDR"]
    TransLvl = camera_parameter["TRANS_LVL"]
    cfg = {"u32CameraType": 0x00,
           "u32Width": width, "u32Height": height,
           "usbType": 0,
           "u8PixelBytes": ByteLength,
           "u16Vid": 0,
           "u32Size": 0,
           "u8PixelBits": BitWidth,
           "u32I2cAddr": I2cAddr,
           "emI2cMode": I2CMode,
           "emImageFmtMode": FmtMode,
           "u32TransLvl": TransLvl}

    ret, handle, rtn_cfg = ArducamSDK.Py_ArduCam_open(cfg, index)
    # ret, handle, rtn_cfg = ArducamSDK.Py_ArduCam_autoopen(cfg)
    if ret == 0:

        # ArducamSDK.Py_ArduCam_writeReg_8_8(handle,0x46,3,0x00)
        usb_version = rtn_cfg['usbType']
        configs = config.configs
        configs_length = config.configs_length
        for i in range(configs_length):
            type = configs[i].type
            if ((type >> 16) & 0xFF) != 0 and ((type >> 16) & 0xFF) != usb_version:
                continue
            if type & 0xFFFF == arducam_config_parser.CONFIG_TYPE_REG:
                # print(" 0x{:04X}, 0x{:02X}".format(configs[i].params[0], configs[i].params[1]))
                ArducamSDK.Py_ArduCam_writeSensorReg(
                    handle, configs[i].params[0], configs[i].params[1])
            elif type & 0xFFFF == arducam_config_parser.CONFIG_TYPE_DELAY:
                time.sleep(float(configs[i].params[0]) / 1000)
            elif type & 0xFFFF == arducam_config_parser.CONFIG_TYPE_VRCMD:
                configBoard(handle, configs[i])

        ArducamSDK.Py_ArduCam_registerCtrls(
            handle, config.controls, config.controls_length)

        rtn_val, datas = ArducamSDK.Py_ArduCam_readUserData(
            handle, 0x400 - 16, 16)
        logger.info("Serial: %c%c%c%c-%c%c%c%c-%c%c%c%c" % (datas[0], datas[1], datas[2], datas[3],
                                                      datas[4], datas[5], datas[6], datas[7],
                                                      datas[8], datas[9], datas[10], datas[11]))

        return True, handle, rtn_cfg, color_mode

    logger.info("open fail, Error : {}".format(GetErrorString(ret)))
    return False, handle, rtn_cfg, color_mode


@logger.catch
def camera_initCPLD(fileName, index):
    # load config file
    config = arducam_config_parser.LoadConfigFile(fileName)

    camera_parameter = config.camera_param.getdict()
    width = camera_parameter["WIDTH"]
    height = camera_parameter["HEIGHT"]

    BitWidth = camera_parameter["BIT_WIDTH"]
    ByteLength = 1
    if 8 < BitWidth <= 16:
        ByteLength = 2
    FmtMode = camera_parameter["FORMAT"][0]
    color_mode = camera_parameter["FORMAT"][1]
    logger.info("color mode: {}".format(color_mode))

    I2CMode = camera_parameter["I2C_MODE"]
    I2cAddr = camera_parameter["I2C_ADDR"]
    TransLvl = camera_parameter["TRANS_LVL"]
    cfg = {"u32CameraType": 0x00,
           "u32Width": width, "u32Height": height,
           "usbType": 0,
           "u8PixelBytes": ByteLength,
           "u16Vid": 0,
           "u32Size": 0,
           "u8PixelBits": BitWidth,
           "u32I2cAddr": I2cAddr,
           "emI2cMode": I2CMode,
           "emImageFmtMode": FmtMode,
           "u32TransLvl": TransLvl}

    ret, handle, rtn_cfg = ArducamSDK.Py_ArduCam_open(cfg, index)
    # ret, handle, rtn_cfg = ArducamSDK.Py_ArduCam_autoopen(cfg)

    if ret == 0:
        configs = config.configs
        configs_length = config.configs_length
        for i in range(configs_length):
            type = configs[i].type
            if ((type >> 16) & 0xFF) != 0 and ((type >> 16) & 0xFF) != rtn_cfg['usbType']:
                continue
            if type & 0xFFFF == arducam_config_parser.CONFIG_TYPE_DELAY:
                time.sleep(float(configs[i].params[0]) / 1000)
            elif type & 0xFFFF == arducam_config_parser.CONFIG_TYPE_VRCMD:
                configBoard(handle, configs[i])
        return True, handle, rtn_cfg, config, I2cAddr, color_mode

    logger.error("initialize fail, Error : {}".format(GetErrorString(ret)))
    return False, handle, rtn_cfg, config, I2cAddr, color_mode


@logger.catch
def camera_initSensor(handle, readConfig, usb_version, I2cAddr):
    # ArducamSDK.Py_ArduCam_writeReg_8_8(handle,0x46,3,0x00)
    # usb_version = rtn_cfg['usbType']
    configs = readConfig.configs
    configs_length = readConfig.configs_length
    for i in range(configs_length):
        type = configs[i].type
        if ((type >> 16) & 0xFF) != 0 and ((type >> 16) & 0xFF) != usb_version:
            continue
        if type & 0xFFFF == arducam_config_parser.CONFIG_TYPE_REG:
            # print(f" {configs[i].params[0]}, {configs[i].params[1]}")
            ArducamSDK.Py_ArduCam_writeSensorReg(
                handle, configs[i].params[0], configs[i].params[1])
        elif type & 0xFFFF == arducam_config_parser.CONFIG_TYPE_DELAY:
            time.sleep(float(configs[i].params[0]) / 1000)
        # elif type & 0xFFFF == arducam_config_parser.CONFIG_TYPE_VRCMD:
        #     configBoard(handle, configs[i])

    ArducamSDK.Py_ArduCam_registerCtrls(
        handle, readConfig.controls, readConfig.controls_length)

    rtn_val, datas = ArducamSDK.Py_ArduCam_readUserData(
        handle, 0x400 - 16, 16)
    logger.info("Serial: %c%c%c%c-%c%c%c%c-%c%c%c%c" % (datas[0], datas[1], datas[2], datas[3],
                                                  datas[4], datas[5], datas[6], datas[7],
                                                  datas[8], datas[9], datas[10], datas[11]))


@logger.catch
def DetectI2c(camera):
    ret = 0
    value_hi = 0
    value_lo = 0
    if camera is not None:
        # ret, value = ArducamSDK.Py_ArduCam_readSensorReg(camera.handle, 0x0F12)
        # logger.info("0x{:02x}".format(value))
        # ret, value = ArducamSDK.Py_ArduCam_readReg_8_8(camera.handle, camera.I2cAddr, 0x00)
        ret, value_hi = ArducamSDK.Py_ArduCam_readSensorReg(camera.handle, 0x0000)
        logger.info(f"ret: {ret}, value_H: {value_hi:02X}")
        ret, value_lo = ArducamSDK.Py_ArduCam_readSensorReg(camera.handle, 0x0001)
        logger.info(f"ret: {ret}, value_L: {value_lo:02X}")
    return value_hi == 0x01 and value_lo == 0xB0
    # logger.info("ret: {}, i2c addr: 0x{:02X}".format(ret, camera.I2cAddr))
    # return not ret


@logger.catch
def cv2AddChineseText(img, text, position, textColor=(0, 255, 0), textSize=30):
    if isinstance(img, np.ndarray):
        img = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    draw = ImageDraw.Draw(img)
    fontStyle = ImageFont.truetype("font/simsun.ttc", textSize, encoding="utf-8")
    draw.text(position, text, textColor, font=fontStyle)
    return cv2.cvtColor(np.asarray(img), cv2.COLOR_RGB2BGR)
